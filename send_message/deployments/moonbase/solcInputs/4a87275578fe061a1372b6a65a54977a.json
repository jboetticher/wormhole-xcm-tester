{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/TokenTransferTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport \"./wormhole/ITokenBridge.sol\";\n\ncontract TokenTransferTest {\n    ITokenBridge tbridge;\n\n    constructor(ITokenBridge _tbridge) {\n        tbridge = _tbridge;\n    }\n\n    function testTransfer(bytes32 destination) payable external {\n        // Transfer 1 ether to moonbase alpha\n        tbridge.wrapAndTransferETHWithPayload{value: msg.value}(\n            16, // Moonbase Alpha / Moonbeam\n            destination, // Destination in padded bytes32 format\n            1, // Nonce\n            abi.encode(\n                '{ \"parents\": 1, \"interior\": { \"X2\": [ { \"Parachain\": 888 }, { \"AccountKey20\": \"0x354B10D47e84A006b9E7e66A229D174E8FF2A063\" } ]}}'\n            )\n        );\n    }\n\n    function testTransferWithPayload(bytes32 destination, bytes memory payload) external {\n        // Transfer 1 ether to moonbase alpha\n        tbridge.wrapAndTransferETHWithPayload{value: 1 ether}(\n            16, // Moonbase Alpha / Moonbeam\n            destination, // Destination in padded bytes32 format\n            1, // Nonce\n            payload // Payload\n        );\n    }\n\n    function wormholeTransferERC20(bytes memory payload) external {\n        tbridge.completeTransferWithPayload(payload);\n    }\n}\n"
    },
    "contracts/wormhole/ITokenBridge.sol": {
      "content": "// contracts/Bridge.sol\n// SPDX-License-Identifier: Apache 2\n\npragma solidity ^0.8.0;\n\nimport \"./IWETH.sol\";\nimport \"./IWormhole.sol\";\n\ninterface ITokenBridge {\n    struct Transfer {\n        uint8 payloadID;\n        uint256 amount;\n        bytes32 tokenAddress;\n        uint16 tokenChain;\n        bytes32 to;\n        uint16 toChain;\n        uint256 fee;\n    }\n\n    struct TransferWithPayload {\n        uint8 payloadID;\n        uint256 amount;\n        bytes32 tokenAddress;\n        uint16 tokenChain;\n        bytes32 to;\n        uint16 toChain;\n        bytes32 fromAddress;\n        bytes payload;\n    }\n\n    struct AssetMeta {\n        uint8 payloadID;\n        bytes32 tokenAddress;\n        uint16 tokenChain;\n        uint8 decimals;\n        bytes32 symbol;\n        bytes32 name;\n    }\n\n    struct RegisterChain {\n        bytes32 module;\n        uint8 action;\n        uint16 chainId;\n\n        uint16 emitterChainID;\n        bytes32 emitterAddress;\n    }\n\n     struct UpgradeContract {\n        bytes32 module;\n        uint8 action;\n        uint16 chainId;\n\n        bytes32 newContract;\n    }\n\n    struct RecoverChainId {\n        bytes32 module;\n        uint8 action;\n\n        uint256 evmChainId;\n        uint16 newChainId;\n    }\n\n    event ContractUpgraded(address indexed oldContract, address indexed newContract);\n\n    function _parseTransferCommon(bytes memory encoded) external pure returns (Transfer memory transfer);\n\n    function attestToken(address tokenAddress, uint32 nonce) external payable returns (uint64 sequence);\n\n    function wrapAndTransferETH(uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce) external payable returns (uint64 sequence);\n\n    function wrapAndTransferETHWithPayload(uint16 recipientChain, bytes32 recipient, uint32 nonce, bytes memory payload) external payable returns (uint64 sequence);\n\n    function transferTokens(address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce) external payable returns (uint64 sequence);\n\n    function transferTokensWithPayload(address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint32 nonce, bytes memory payload) external payable returns (uint64 sequence);\n\n    function updateWrapped(bytes memory encodedVm) external returns (address token);\n\n    function createWrapped(bytes memory encodedVm) external returns (address token);\n\n    function completeTransferWithPayload(bytes memory encodedVm) external returns (bytes memory);\n\n    function completeTransferAndUnwrapETHWithPayload(bytes memory encodedVm) external returns (bytes memory);\n\n    function completeTransfer(bytes memory encodedVm) external;\n\n    function completeTransferAndUnwrapETH(bytes memory encodedVm) external;\n\n    function encodeAssetMeta(AssetMeta memory meta) external pure returns (bytes memory encoded);\n\n    function encodeTransfer(Transfer memory transfer) external pure returns (bytes memory encoded);\n\n    function encodeTransferWithPayload(TransferWithPayload memory transfer) external pure returns (bytes memory encoded);\n\n    function parsePayloadID(bytes memory encoded) external pure returns (uint8 payloadID);\n\n    function parseAssetMeta(bytes memory encoded) external pure returns (AssetMeta memory meta);\n\n    function parseTransfer(bytes memory encoded) external pure returns (Transfer memory transfer);\n\n    function parseTransferWithPayload(bytes memory encoded) external pure returns (TransferWithPayload memory transfer);\n\n    function governanceActionIsConsumed(bytes32 hash) external view returns (bool);\n\n    function isInitialized(address impl) external view returns (bool);\n\n    function isTransferCompleted(bytes32 hash) external view returns (bool);\n\n    function wormhole() external view returns (IWormhole);\n\n    function chainId() external view returns (uint16);\n\n    function evmChainId() external view returns (uint256);\n\n    function isFork() external view returns (bool);\n\n    function governanceChainId() external view returns (uint16);\n\n    function governanceContract() external view returns (bytes32);\n\n    function wrappedAsset(uint16 tokenChainId, bytes32 tokenAddress) external view returns (address);\n\n    function bridgeContracts(uint16 chainId_) external view returns (bytes32);\n\n    function tokenImplementation() external view returns (address);\n\n    function WETH() external view returns (IWETH);\n\n    function outstandingBridged(address token) external view returns (uint256);\n\n    function isWrappedAsset(address token) external view returns (bool);\n\n    function finality() external view returns (uint8);\n\n    function implementation() external view returns (address);\n\n    function initialize() external;\n\n    function registerChain(bytes memory encodedVM) external;\n\n    function upgrade(bytes memory encodedVM) external;\n\n    function submitRecoverChainId(bytes memory encodedVM) external;\n\n    function parseRegisterChain(bytes memory encoded) external pure returns (RegisterChain memory chain);\n\n    function parseUpgrade(bytes memory encoded) external pure returns (UpgradeContract memory chain);\n\n    function parseRecoverChainId(bytes memory encodedRecoverChainId) external pure returns (RecoverChainId memory rci);\n}"
    },
    "contracts/wormhole/IWETH.sol": {
      "content": "// contracts/Bridge.sol\n// SPDX-License-Identifier: Apache 2\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint amount) external;\n}"
    },
    "contracts/wormhole/IWormhole.sol": {
      "content": "// contracts/Messages.sol\n// SPDX-License-Identifier: Apache 2\n\npragma solidity ^0.8.0;\n\ninterface IWormhole {\n    struct GuardianSet {\n        address[] keys;\n        uint32 expirationTime;\n    }\n\n    struct Signature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint8 guardianIndex;\n    }\n\n    struct VM {\n        uint8 version;\n        uint32 timestamp;\n        uint32 nonce;\n        uint16 emitterChainId;\n        bytes32 emitterAddress;\n        uint64 sequence;\n        uint8 consistencyLevel;\n        bytes payload;\n\n        uint32 guardianSetIndex;\n        Signature[] signatures;\n\n        bytes32 hash;\n    }\n\n    struct ContractUpgrade {\n        bytes32 module;\n        uint8 action;\n        uint16 chain;\n\n        address newContract;\n    }\n\n    struct GuardianSetUpgrade {\n        bytes32 module;\n        uint8 action;\n        uint16 chain;\n\n        GuardianSet newGuardianSet;\n        uint32 newGuardianSetIndex;\n    }\n\n    struct SetMessageFee {\n        bytes32 module;\n        uint8 action;\n        uint16 chain;\n\n        uint256 messageFee;\n    }\n\n    struct TransferFees {\n        bytes32 module;\n        uint8 action;\n        uint16 chain;\n\n        uint256 amount;\n        bytes32 recipient;\n    }\n\n    struct RecoverChainId {\n        bytes32 module;\n        uint8 action;\n\n        uint256 evmChainId;\n        uint16 newChainId;\n    }\n\n    event LogMessagePublished(address indexed sender, uint64 sequence, uint32 nonce, bytes payload, uint8 consistencyLevel);\n    event ContractUpgraded(address indexed oldContract, address indexed newContract);\n    event GuardianSetAdded(uint32 indexed index);\n\n    function publishMessage(\n        uint32 nonce,\n        bytes memory payload,\n        uint8 consistencyLevel\n    ) external payable returns (uint64 sequence);\n\n    function initialize() external;\n\n    function parseAndVerifyVM(bytes calldata encodedVM) external view returns (VM memory vm, bool valid, string memory reason);\n\n    function verifyVM(VM memory vm) external view returns (bool valid, string memory reason);\n\n    function verifySignatures(bytes32 hash, Signature[] memory signatures, GuardianSet memory guardianSet) external pure returns (bool valid, string memory reason);\n\n    function parseVM(bytes memory encodedVM) external pure returns (VM memory vm);\n\n    function quorum(uint numGuardians) external pure returns (uint numSignaturesRequiredForQuorum);\n\n    function getGuardianSet(uint32 index) external view returns (GuardianSet memory);\n\n    function getCurrentGuardianSetIndex() external view returns (uint32);\n\n    function getGuardianSetExpiry() external view returns (uint32);\n\n    function governanceActionIsConsumed(bytes32 hash) external view returns (bool);\n\n    function isInitialized(address impl) external view returns (bool);\n\n    function chainId() external view returns (uint16);\n\n    function isFork() external view returns (bool);\n\n    function governanceChainId() external view returns (uint16);\n\n    function governanceContract() external view returns (bytes32);\n\n    function messageFee() external view returns (uint256);\n\n    function evmChainId() external view returns (uint256);\n\n    function nextSequence(address emitter) external view returns (uint64);\n\n    function parseContractUpgrade(bytes memory encodedUpgrade) external pure returns (ContractUpgrade memory cu);\n\n    function parseGuardianSetUpgrade(bytes memory encodedUpgrade) external pure returns (GuardianSetUpgrade memory gsu);\n\n    function parseSetMessageFee(bytes memory encodedSetMessageFee) external pure returns (SetMessageFee memory smf);\n\n    function parseTransferFees(bytes memory encodedTransferFees) external pure returns (TransferFees memory tf);\n\n    function parseRecoverChainId(bytes memory encodedRecoverChainId) external pure returns (RecoverChainId memory rci);\n\n    function submitContractUpgrade(bytes memory _vm) external;\n\n    function submitSetMessageFee(bytes memory _vm) external;\n\n    function submitNewGuardianSet(bytes memory _vm) external;\n\n    function submitTransferFees(bytes memory _vm) external;\n\n    function submitRecoverChainId(bytes memory _vm) external;\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}