{
  "address": "0x242Ce7480e8892AAa64fa6857FfbF490Bb85eb10",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITokenBridge",
          "name": "_tbridge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "destination",
          "type": "bytes32"
        }
      ],
      "name": "testTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "destination",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "testTransferWithPayload",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "wormholeTransferERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xca9d556850215e233de55c7f6dbd24fd91c6456a4f67125458fd9678bdf29095",
  "receipt": {
    "to": null,
    "from": "0x0394c0EdFcCA370B20622721985B577850B0eb75",
    "contractAddress": "0x242Ce7480e8892AAa64fa6857FfbF490Bb85eb10",
    "transactionIndex": 0,
    "gasUsed": "579449",
    "logsBloom": "0x
    "blockHash": "0x78e2aedd08897ec02af79a69af938243a929280258812549449c9d5e59458737",
    "transactionHash": "0xca9d556850215e233de55c7f6dbd24fd91c6456a4f67125458fd9678bdf29095",
    "logs": [],
    "blockNumber": 3908547,
    "cumulativeGasUsed": "579449",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbc976D4b9D57E57c3cA52e1Fd136C45FF7955A96"
  ],
  "numDeployments": 1,
  "solcInputHash": "4a87275578fe061a1372b6a65a54977a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITokenBridge\",\"name\":\"_tbridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"}],\"name\":\"testTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"testTransferWithPayload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"wormholeTransferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenTransferTest.sol\":\"TokenTransferTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/TokenTransferTest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./wormhole/ITokenBridge.sol\\\";\\n\\ncontract TokenTransferTest {\\n    ITokenBridge tbridge;\\n\\n    constructor(ITokenBridge _tbridge) {\\n        tbridge = _tbridge;\\n    }\\n\\n    function testTransfer(bytes32 destination) payable external {\\n        // Transfer 1 ether to moonbase alpha\\n        tbridge.wrapAndTransferETHWithPayload{value: msg.value}(\\n            16, // Moonbase Alpha / Moonbeam\\n            destination, // Destination in padded bytes32 format\\n            1, // Nonce\\n            abi.encode(\\n                '{ \\\"parents\\\": 1, \\\"interior\\\": { \\\"X2\\\": [ { \\\"Parachain\\\": 888 }, { \\\"AccountKey20\\\": \\\"0x354B10D47e84A006b9E7e66A229D174E8FF2A063\\\" } ]}}'\\n            )\\n        );\\n    }\\n\\n    function testTransferWithPayload(bytes32 destination, bytes memory payload) external {\\n        // Transfer 1 ether to moonbase alpha\\n        tbridge.wrapAndTransferETHWithPayload{value: 1 ether}(\\n            16, // Moonbase Alpha / Moonbeam\\n            destination, // Destination in padded bytes32 format\\n            1, // Nonce\\n            payload // Payload\\n        );\\n    }\\n\\n    function wormholeTransferERC20(bytes memory payload) external {\\n        tbridge.completeTransferWithPayload(payload);\\n    }\\n}\\n\",\"keccak256\":\"0x5db572d2c834677c52f2ac24641a5ee95d2f8e4a68dcf1e86c283e7f04ea5a4d\",\"license\":\"UNLICENSED\"},\"contracts/wormhole/ITokenBridge.sol\":{\"content\":\"// contracts/Bridge.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./IWormhole.sol\\\";\\n\\ninterface ITokenBridge {\\n    struct Transfer {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        uint256 fee;\\n    }\\n\\n    struct TransferWithPayload {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        bytes32 fromAddress;\\n        bytes payload;\\n    }\\n\\n    struct AssetMeta {\\n        uint8 payloadID;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        uint8 decimals;\\n        bytes32 symbol;\\n        bytes32 name;\\n    }\\n\\n    struct RegisterChain {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chainId;\\n\\n        uint16 emitterChainID;\\n        bytes32 emitterAddress;\\n    }\\n\\n     struct UpgradeContract {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chainId;\\n\\n        bytes32 newContract;\\n    }\\n\\n    struct RecoverChainId {\\n        bytes32 module;\\n        uint8 action;\\n\\n        uint256 evmChainId;\\n        uint16 newChainId;\\n    }\\n\\n    event ContractUpgraded(address indexed oldContract, address indexed newContract);\\n\\n    function _parseTransferCommon(bytes memory encoded) external pure returns (Transfer memory transfer);\\n\\n    function attestToken(address tokenAddress, uint32 nonce) external payable returns (uint64 sequence);\\n\\n    function wrapAndTransferETH(uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce) external payable returns (uint64 sequence);\\n\\n    function wrapAndTransferETHWithPayload(uint16 recipientChain, bytes32 recipient, uint32 nonce, bytes memory payload) external payable returns (uint64 sequence);\\n\\n    function transferTokens(address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce) external payable returns (uint64 sequence);\\n\\n    function transferTokensWithPayload(address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint32 nonce, bytes memory payload) external payable returns (uint64 sequence);\\n\\n    function updateWrapped(bytes memory encodedVm) external returns (address token);\\n\\n    function createWrapped(bytes memory encodedVm) external returns (address token);\\n\\n    function completeTransferWithPayload(bytes memory encodedVm) external returns (bytes memory);\\n\\n    function completeTransferAndUnwrapETHWithPayload(bytes memory encodedVm) external returns (bytes memory);\\n\\n    function completeTransfer(bytes memory encodedVm) external;\\n\\n    function completeTransferAndUnwrapETH(bytes memory encodedVm) external;\\n\\n    function encodeAssetMeta(AssetMeta memory meta) external pure returns (bytes memory encoded);\\n\\n    function encodeTransfer(Transfer memory transfer) external pure returns (bytes memory encoded);\\n\\n    function encodeTransferWithPayload(TransferWithPayload memory transfer) external pure returns (bytes memory encoded);\\n\\n    function parsePayloadID(bytes memory encoded) external pure returns (uint8 payloadID);\\n\\n    function parseAssetMeta(bytes memory encoded) external pure returns (AssetMeta memory meta);\\n\\n    function parseTransfer(bytes memory encoded) external pure returns (Transfer memory transfer);\\n\\n    function parseTransferWithPayload(bytes memory encoded) external pure returns (TransferWithPayload memory transfer);\\n\\n    function governanceActionIsConsumed(bytes32 hash) external view returns (bool);\\n\\n    function isInitialized(address impl) external view returns (bool);\\n\\n    function isTransferCompleted(bytes32 hash) external view returns (bool);\\n\\n    function wormhole() external view returns (IWormhole);\\n\\n    function chainId() external view returns (uint16);\\n\\n    function evmChainId() external view returns (uint256);\\n\\n    function isFork() external view returns (bool);\\n\\n    function governanceChainId() external view returns (uint16);\\n\\n    function governanceContract() external view returns (bytes32);\\n\\n    function wrappedAsset(uint16 tokenChainId, bytes32 tokenAddress) external view returns (address);\\n\\n    function bridgeContracts(uint16 chainId_) external view returns (bytes32);\\n\\n    function tokenImplementation() external view returns (address);\\n\\n    function WETH() external view returns (IWETH);\\n\\n    function outstandingBridged(address token) external view returns (uint256);\\n\\n    function isWrappedAsset(address token) external view returns (bool);\\n\\n    function finality() external view returns (uint8);\\n\\n    function implementation() external view returns (address);\\n\\n    function initialize() external;\\n\\n    function registerChain(bytes memory encodedVM) external;\\n\\n    function upgrade(bytes memory encodedVM) external;\\n\\n    function submitRecoverChainId(bytes memory encodedVM) external;\\n\\n    function parseRegisterChain(bytes memory encoded) external pure returns (RegisterChain memory chain);\\n\\n    function parseUpgrade(bytes memory encoded) external pure returns (UpgradeContract memory chain);\\n\\n    function parseRecoverChainId(bytes memory encodedRecoverChainId) external pure returns (RecoverChainId memory rci);\\n}\",\"keccak256\":\"0x4c464b3e06d31406bd5c777cf8cc985a2f61ce363b6b8f1471c6b5c5da85bf17\",\"license\":\"Apache 2\"},\"contracts/wormhole/IWETH.sol\":{\"content\":\"// contracts/Bridge.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint amount) external;\\n}\",\"keccak256\":\"0xecabfd3b5626aaac6da21213b966a2aac8380f4fec739f84ffe08b29006d134e\",\"license\":\"Apache 2\"},\"contracts/wormhole/IWormhole.sol\":{\"content\":\"// contracts/Messages.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWormhole {\\n    struct GuardianSet {\\n        address[] keys;\\n        uint32 expirationTime;\\n    }\\n\\n    struct Signature {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 guardianIndex;\\n    }\\n\\n    struct VM {\\n        uint8 version;\\n        uint32 timestamp;\\n        uint32 nonce;\\n        uint16 emitterChainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n        uint8 consistencyLevel;\\n        bytes payload;\\n\\n        uint32 guardianSetIndex;\\n        Signature[] signatures;\\n\\n        bytes32 hash;\\n    }\\n\\n    struct ContractUpgrade {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chain;\\n\\n        address newContract;\\n    }\\n\\n    struct GuardianSetUpgrade {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chain;\\n\\n        GuardianSet newGuardianSet;\\n        uint32 newGuardianSetIndex;\\n    }\\n\\n    struct SetMessageFee {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chain;\\n\\n        uint256 messageFee;\\n    }\\n\\n    struct TransferFees {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chain;\\n\\n        uint256 amount;\\n        bytes32 recipient;\\n    }\\n\\n    struct RecoverChainId {\\n        bytes32 module;\\n        uint8 action;\\n\\n        uint256 evmChainId;\\n        uint16 newChainId;\\n    }\\n\\n    event LogMessagePublished(address indexed sender, uint64 sequence, uint32 nonce, bytes payload, uint8 consistencyLevel);\\n    event ContractUpgraded(address indexed oldContract, address indexed newContract);\\n    event GuardianSetAdded(uint32 indexed index);\\n\\n    function publishMessage(\\n        uint32 nonce,\\n        bytes memory payload,\\n        uint8 consistencyLevel\\n    ) external payable returns (uint64 sequence);\\n\\n    function initialize() external;\\n\\n    function parseAndVerifyVM(bytes calldata encodedVM) external view returns (VM memory vm, bool valid, string memory reason);\\n\\n    function verifyVM(VM memory vm) external view returns (bool valid, string memory reason);\\n\\n    function verifySignatures(bytes32 hash, Signature[] memory signatures, GuardianSet memory guardianSet) external pure returns (bool valid, string memory reason);\\n\\n    function parseVM(bytes memory encodedVM) external pure returns (VM memory vm);\\n\\n    function quorum(uint numGuardians) external pure returns (uint numSignaturesRequiredForQuorum);\\n\\n    function getGuardianSet(uint32 index) external view returns (GuardianSet memory);\\n\\n    function getCurrentGuardianSetIndex() external view returns (uint32);\\n\\n    function getGuardianSetExpiry() external view returns (uint32);\\n\\n    function governanceActionIsConsumed(bytes32 hash) external view returns (bool);\\n\\n    function isInitialized(address impl) external view returns (bool);\\n\\n    function chainId() external view returns (uint16);\\n\\n    function isFork() external view returns (bool);\\n\\n    function governanceChainId() external view returns (uint16);\\n\\n    function governanceContract() external view returns (bytes32);\\n\\n    function messageFee() external view returns (uint256);\\n\\n    function evmChainId() external view returns (uint256);\\n\\n    function nextSequence(address emitter) external view returns (uint64);\\n\\n    function parseContractUpgrade(bytes memory encodedUpgrade) external pure returns (ContractUpgrade memory cu);\\n\\n    function parseGuardianSetUpgrade(bytes memory encodedUpgrade) external pure returns (GuardianSetUpgrade memory gsu);\\n\\n    function parseSetMessageFee(bytes memory encodedSetMessageFee) external pure returns (SetMessageFee memory smf);\\n\\n    function parseTransferFees(bytes memory encodedTransferFees) external pure returns (TransferFees memory tf);\\n\\n    function parseRecoverChainId(bytes memory encodedRecoverChainId) external pure returns (RecoverChainId memory rci);\\n\\n    function submitContractUpgrade(bytes memory _vm) external;\\n\\n    function submitSetMessageFee(bytes memory _vm) external;\\n\\n    function submitNewGuardianSet(bytes memory _vm) external;\\n\\n    function submitTransferFees(bytes memory _vm) external;\\n\\n    function submitRecoverChainId(bytes memory _vm) external;\\n}\",\"keccak256\":\"0x06c38148400274d9648a51d08d575799463276696959c611a13f9edb07a2d9c9\",\"license\":\"Apache 2\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a34380380610a34833981810160405281019061003291906100ed565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b60006100ba8261009d565b9050919050565b6100ca816100af565b81146100d557600080fd5b50565b6000815190506100e7816100c1565b92915050565b60006020828403121561010357610102610078565b5b6000610111848285016100d8565b91505092915050565b61090b806101296000396000f3fe6080604052600436106100345760003560e01c8063082e4660146100395780632f60f70514610055578063f53774ab1461007e575b600080fd5b610053600480360381019061004e919061030e565b6100a7565b005b34801561006157600080fd5b5061007c60048036038101906100779190610481565b61016d565b005b34801561008a57600080fd5b506100a560048036038101906100a091906104dd565b61021f565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bee9cdfc3460108460016040516020016100f8906105f5565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016101269493929190610741565b60206040518083038185885af1158015610144573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061016991906107cd565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bee9cdfc670de0b6b3a76400006010856001866040518663ffffffff1660e01b81526004016101d79493929190610741565b60206040518083038185885af11580156101f5573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061021a91906107cd565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3f511c1826040518263ffffffff1660e01b815260040161027891906107fa565b6000604051808303816000875af1158015610297573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102c0919061088c565b5050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6102eb816102d8565b81146102f657600080fd5b50565b600081359050610308816102e2565b92915050565b600060208284031215610324576103236102ce565b5b6000610332848285016102f9565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61038e82610345565b810181811067ffffffffffffffff821117156103ad576103ac610356565b5b80604052505050565b60006103c06102c4565b90506103cc8282610385565b919050565b600067ffffffffffffffff8211156103ec576103eb610356565b5b6103f582610345565b9050602081019050919050565b82818337600083830152505050565b600061042461041f846103d1565b6103b6565b9050828152602081018484840111156104405761043f610340565b5b61044b848285610402565b509392505050565b600082601f8301126104685761046761033b565b5b8135610478848260208601610411565b91505092915050565b60008060408385031215610498576104976102ce565b5b60006104a6858286016102f9565b925050602083013567ffffffffffffffff8111156104c7576104c66102d3565b5b6104d385828601610453565b9150509250929050565b6000602082840312156104f3576104f26102ce565b5b600082013567ffffffffffffffff811115610511576105106102d3565b5b61051d84828501610453565b91505092915050565b600082825260208201905092915050565b7f7b2022706172656e7473223a20312c2022696e746572696f72223a207b20225860008201527f32223a205b207b202250617261636861696e223a20383838207d2c207b20224160208201527f63636f756e744b65793230223a2022307833353442313044343765383441303060408201527f3662394537653636413232394431373445384646324130363322207d205d7d7d606082015250565b60006105df608083610526565b91506105ea82610537565b608082019050919050565b6000602082019050818103600083015261060e816105d2565b9050919050565b6000819050919050565b600061ffff82169050919050565b6000819050919050565b600061065261064d61064884610615565b61062d565b61061f565b9050919050565b61066281610637565b82525050565b610671816102d8565b82525050565b6000819050919050565b600063ffffffff82169050919050565b60006106ac6106a76106a284610677565b61062d565b610681565b9050919050565b6106bc81610691565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106fc5780820151818401526020810190506106e1565b60008484015250505050565b6000610713826106c2565b61071d81856106cd565b935061072d8185602086016106de565b61073681610345565b840191505092915050565b60006080820190506107566000830187610659565b6107636020830186610668565b61077060408301856106b3565b81810360608301526107828184610708565b905095945050505050565b600067ffffffffffffffff82169050919050565b6107aa8161078d565b81146107b557600080fd5b50565b6000815190506107c7816107a1565b92915050565b6000602082840312156107e3576107e26102ce565b5b60006107f1848285016107b8565b91505092915050565b600060208201905081810360008301526108148184610708565b905092915050565b600061082f61082a846103d1565b6103b6565b90508281526020810184848401111561084b5761084a610340565b5b6108568482856106de565b509392505050565b600082601f8301126108735761087261033b565b5b815161088384826020860161081c565b91505092915050565b6000602082840312156108a2576108a16102ce565b5b600082015167ffffffffffffffff8111156108c0576108bf6102d3565b5b6108cc8482850161085e565b9150509291505056fea2646970667358221220525dd8de00b108d654451b55a0cfda643c2572f04a732eaac92061eb5647348f64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c8063082e4660146100395780632f60f70514610055578063f53774ab1461007e575b600080fd5b610053600480360381019061004e919061030e565b6100a7565b005b34801561006157600080fd5b5061007c60048036038101906100779190610481565b61016d565b005b34801561008a57600080fd5b506100a560048036038101906100a091906104dd565b61021f565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bee9cdfc3460108460016040516020016100f8906105f5565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016101269493929190610741565b60206040518083038185885af1158015610144573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061016991906107cd565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bee9cdfc670de0b6b3a76400006010856001866040518663ffffffff1660e01b81526004016101d79493929190610741565b60206040518083038185885af11580156101f5573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061021a91906107cd565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3f511c1826040518263ffffffff1660e01b815260040161027891906107fa565b6000604051808303816000875af1158015610297573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102c0919061088c565b5050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6102eb816102d8565b81146102f657600080fd5b50565b600081359050610308816102e2565b92915050565b600060208284031215610324576103236102ce565b5b6000610332848285016102f9565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61038e82610345565b810181811067ffffffffffffffff821117156103ad576103ac610356565b5b80604052505050565b60006103c06102c4565b90506103cc8282610385565b919050565b600067ffffffffffffffff8211156103ec576103eb610356565b5b6103f582610345565b9050602081019050919050565b82818337600083830152505050565b600061042461041f846103d1565b6103b6565b9050828152602081018484840111156104405761043f610340565b5b61044b848285610402565b509392505050565b600082601f8301126104685761046761033b565b5b8135610478848260208601610411565b91505092915050565b60008060408385031215610498576104976102ce565b5b60006104a6858286016102f9565b925050602083013567ffffffffffffffff8111156104c7576104c66102d3565b5b6104d385828601610453565b9150509250929050565b6000602082840312156104f3576104f26102ce565b5b600082013567ffffffffffffffff811115610511576105106102d3565b5b61051d84828501610453565b91505092915050565b600082825260208201905092915050565b7f7b2022706172656e7473223a20312c2022696e746572696f72223a207b20225860008201527f32223a205b207b202250617261636861696e223a20383838207d2c207b20224160208201527f63636f756e744b65793230223a2022307833353442313044343765383441303060408201527f3662394537653636413232394431373445384646324130363322207d205d7d7d606082015250565b60006105df608083610526565b91506105ea82610537565b608082019050919050565b6000602082019050818103600083015261060e816105d2565b9050919050565b6000819050919050565b600061ffff82169050919050565b6000819050919050565b600061065261064d61064884610615565b61062d565b61061f565b9050919050565b61066281610637565b82525050565b610671816102d8565b82525050565b6000819050919050565b600063ffffffff82169050919050565b60006106ac6106a76106a284610677565b61062d565b610681565b9050919050565b6106bc81610691565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106fc5780820151818401526020810190506106e1565b60008484015250505050565b6000610713826106c2565b61071d81856106cd565b935061072d8185602086016106de565b61073681610345565b840191505092915050565b60006080820190506107566000830187610659565b6107636020830186610668565b61077060408301856106b3565b81810360608301526107828184610708565b905095945050505050565b600067ffffffffffffffff82169050919050565b6107aa8161078d565b81146107b557600080fd5b50565b6000815190506107c7816107a1565b92915050565b6000602082840312156107e3576107e26102ce565b5b60006107f1848285016107b8565b91505092915050565b600060208201905081810360008301526108148184610708565b905092915050565b600061082f61082a846103d1565b6103b6565b90508281526020810184848401111561084b5761084a610340565b5b6108568482856106de565b509392505050565b600082601f8301126108735761087261033b565b5b815161088384826020860161081c565b91505092915050565b6000602082840312156108a2576108a16102ce565b5b600082015167ffffffffffffffff8111156108c0576108bf6102d3565b5b6108cc8482850161085e565b9150509291505056fea2646970667358221220525dd8de00b108d654451b55a0cfda643c2572f04a732eaac92061eb5647348f64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 83,
        "contract": "contracts/TokenTransferTest.sol:TokenTransferTest",
        "label": "tbridge",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITokenBridge)547"
      }
    ],
    "types": {
      "t_contract(ITokenBridge)547": {
        "encoding": "inplace",
        "label": "contract ITokenBridge",
        "numberOfBytes": "20"
      }
    }
  }
}