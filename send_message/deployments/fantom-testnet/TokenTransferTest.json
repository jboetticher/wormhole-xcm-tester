{
  "address": "0x87f6Fec8625BaC3efDAF537C3C8058C1a88d9467",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITokenBridge",
          "name": "_tbridge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "WormholeTransferCompleted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "destination",
          "type": "bytes32"
        }
      ],
      "name": "testTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "destination",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "testTransferWithPayload",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "wormholeTransferERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0004ae06a89e81c7c84930b056f9663f56a1a97333a7c394adf8a048e9f20933",
  "receipt": {
    "to": null,
    "from": "0x0394c0EdFcCA370B20622721985B577850B0eb75",
    "contractAddress": "0x87f6Fec8625BaC3efDAF537C3C8058C1a88d9467",
    "transactionIndex": 0,
    "gasUsed": "587927",
    "logsBloom": "0x
    "blockHash": "0x0000477e00000f0259074af17c1b24fa234153379555d92deb7537619e413385",
    "transactionHash": "0x0004ae06a89e81c7c84930b056f9663f56a1a97333a7c394adf8a048e9f20933",
    "logs": [],
    "blockNumber": 14425638,
    "cumulativeGasUsed": "587927",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x599CEa2204B4FaECd584Ab1F2b6aCA137a0afbE8"
  ],
  "numDeployments": 3,
  "solcInputHash": "a3ddca467b698b30764178ec44548f8b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITokenBridge\",\"name\":\"_tbridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"WormholeTransferCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"}],\"name\":\"testTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"testTransferWithPayload\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"wormholeTransferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenTransferTest.sol\":\"TokenTransferTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/TokenTransferTest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./wormhole/ITokenBridge.sol\\\";\\n\\n// NOTE: don't rename, keep \\\"TokenTransferTest\\\". Relayer depends on this name\\ncontract TokenTransferTest {\\n    ITokenBridge tbridge;\\n    event WormholeTransferCompleted(bytes);\\n\\n    constructor(ITokenBridge _tbridge) {\\n        tbridge = _tbridge;\\n    }\\n\\n    function testTransfer(bytes32 destination) payable external {\\n        // Transfer 1 ether to moonbase alpha\\n        tbridge.wrapAndTransferETHWithPayload{value: msg.value}(\\n            16, // Moonbase Alpha / Moonbeam\\n            destination, // Destination in padded bytes32 format\\n            1, // Nonce\\n            abi.encode(\\n                '{ \\\"parents\\\": 1, \\\"interior\\\": { \\\"X2\\\": [ { \\\"Parachain\\\": 888 }, { \\\"AccountKey20\\\": \\\"0x354B10D47e84A006b9E7e66A229D174E8FF2A063\\\" } ]}}'\\n            )\\n        );\\n    }\\n\\n    function testTransferWithPayload(bytes32 destination, bytes memory payload) payable external {\\n        // Transfer 1 ether to moonbase alpha\\n        tbridge.wrapAndTransferETHWithPayload{value: msg.value}(\\n            16, // Moonbase Alpha / Moonbeam\\n            destination, // Destination in padded bytes32 format\\n            1, // Nonce\\n            payload // Payload\\n        );\\n    }\\n\\n    function wormholeTransferERC20(bytes memory payload) external {\\n        bytes memory payload = tbridge.completeTransferWithPayload(payload);\\n        emit WormholeTransferCompleted(payload);\\n    }\\n}\\n\",\"keccak256\":\"0x7a8f791f7d44566dad142ecf8b31bc841a48c601e67247a3b4f4da1db6bf98ee\",\"license\":\"UNLICENSED\"},\"contracts/wormhole/ITokenBridge.sol\":{\"content\":\"// contracts/Bridge.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./IWormhole.sol\\\";\\n\\ninterface ITokenBridge {\\n    struct Transfer {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        uint256 fee;\\n    }\\n\\n    struct TransferWithPayload {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        bytes32 fromAddress;\\n        bytes payload;\\n    }\\n\\n    struct AssetMeta {\\n        uint8 payloadID;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        uint8 decimals;\\n        bytes32 symbol;\\n        bytes32 name;\\n    }\\n\\n    struct RegisterChain {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chainId;\\n\\n        uint16 emitterChainID;\\n        bytes32 emitterAddress;\\n    }\\n\\n     struct UpgradeContract {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chainId;\\n\\n        bytes32 newContract;\\n    }\\n\\n    struct RecoverChainId {\\n        bytes32 module;\\n        uint8 action;\\n\\n        uint256 evmChainId;\\n        uint16 newChainId;\\n    }\\n\\n    event ContractUpgraded(address indexed oldContract, address indexed newContract);\\n\\n    function _parseTransferCommon(bytes memory encoded) external pure returns (Transfer memory transfer);\\n\\n    function attestToken(address tokenAddress, uint32 nonce) external payable returns (uint64 sequence);\\n\\n    function wrapAndTransferETH(uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce) external payable returns (uint64 sequence);\\n\\n    function wrapAndTransferETHWithPayload(uint16 recipientChain, bytes32 recipient, uint32 nonce, bytes memory payload) external payable returns (uint64 sequence);\\n\\n    function transferTokens(address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce) external payable returns (uint64 sequence);\\n\\n    function transferTokensWithPayload(address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint32 nonce, bytes memory payload) external payable returns (uint64 sequence);\\n\\n    function updateWrapped(bytes memory encodedVm) external returns (address token);\\n\\n    function createWrapped(bytes memory encodedVm) external returns (address token);\\n\\n    function completeTransferWithPayload(bytes memory encodedVm) external returns (bytes memory);\\n\\n    function completeTransferAndUnwrapETHWithPayload(bytes memory encodedVm) external returns (bytes memory);\\n\\n    function completeTransfer(bytes memory encodedVm) external;\\n\\n    function completeTransferAndUnwrapETH(bytes memory encodedVm) external;\\n\\n    function encodeAssetMeta(AssetMeta memory meta) external pure returns (bytes memory encoded);\\n\\n    function encodeTransfer(Transfer memory transfer) external pure returns (bytes memory encoded);\\n\\n    function encodeTransferWithPayload(TransferWithPayload memory transfer) external pure returns (bytes memory encoded);\\n\\n    function parsePayloadID(bytes memory encoded) external pure returns (uint8 payloadID);\\n\\n    function parseAssetMeta(bytes memory encoded) external pure returns (AssetMeta memory meta);\\n\\n    function parseTransfer(bytes memory encoded) external pure returns (Transfer memory transfer);\\n\\n    function parseTransferWithPayload(bytes memory encoded) external pure returns (TransferWithPayload memory transfer);\\n\\n    function governanceActionIsConsumed(bytes32 hash) external view returns (bool);\\n\\n    function isInitialized(address impl) external view returns (bool);\\n\\n    function isTransferCompleted(bytes32 hash) external view returns (bool);\\n\\n    function wormhole() external view returns (IWormhole);\\n\\n    function chainId() external view returns (uint16);\\n\\n    function evmChainId() external view returns (uint256);\\n\\n    function isFork() external view returns (bool);\\n\\n    function governanceChainId() external view returns (uint16);\\n\\n    function governanceContract() external view returns (bytes32);\\n\\n    function wrappedAsset(uint16 tokenChainId, bytes32 tokenAddress) external view returns (address);\\n\\n    function bridgeContracts(uint16 chainId_) external view returns (bytes32);\\n\\n    function tokenImplementation() external view returns (address);\\n\\n    function WETH() external view returns (IWETH);\\n\\n    function outstandingBridged(address token) external view returns (uint256);\\n\\n    function isWrappedAsset(address token) external view returns (bool);\\n\\n    function finality() external view returns (uint8);\\n\\n    function implementation() external view returns (address);\\n\\n    function initialize() external;\\n\\n    function registerChain(bytes memory encodedVM) external;\\n\\n    function upgrade(bytes memory encodedVM) external;\\n\\n    function submitRecoverChainId(bytes memory encodedVM) external;\\n\\n    function parseRegisterChain(bytes memory encoded) external pure returns (RegisterChain memory chain);\\n\\n    function parseUpgrade(bytes memory encoded) external pure returns (UpgradeContract memory chain);\\n\\n    function parseRecoverChainId(bytes memory encodedRecoverChainId) external pure returns (RecoverChainId memory rci);\\n}\",\"keccak256\":\"0x4c464b3e06d31406bd5c777cf8cc985a2f61ce363b6b8f1471c6b5c5da85bf17\",\"license\":\"Apache 2\"},\"contracts/wormhole/IWETH.sol\":{\"content\":\"// contracts/Bridge.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint amount) external;\\n}\",\"keccak256\":\"0xecabfd3b5626aaac6da21213b966a2aac8380f4fec739f84ffe08b29006d134e\",\"license\":\"Apache 2\"},\"contracts/wormhole/IWormhole.sol\":{\"content\":\"// contracts/Messages.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWormhole {\\n    struct GuardianSet {\\n        address[] keys;\\n        uint32 expirationTime;\\n    }\\n\\n    struct Signature {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 guardianIndex;\\n    }\\n\\n    struct VM {\\n        uint8 version;\\n        uint32 timestamp;\\n        uint32 nonce;\\n        uint16 emitterChainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n        uint8 consistencyLevel;\\n        bytes payload;\\n\\n        uint32 guardianSetIndex;\\n        Signature[] signatures;\\n\\n        bytes32 hash;\\n    }\\n\\n    struct ContractUpgrade {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chain;\\n\\n        address newContract;\\n    }\\n\\n    struct GuardianSetUpgrade {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chain;\\n\\n        GuardianSet newGuardianSet;\\n        uint32 newGuardianSetIndex;\\n    }\\n\\n    struct SetMessageFee {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chain;\\n\\n        uint256 messageFee;\\n    }\\n\\n    struct TransferFees {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chain;\\n\\n        uint256 amount;\\n        bytes32 recipient;\\n    }\\n\\n    struct RecoverChainId {\\n        bytes32 module;\\n        uint8 action;\\n\\n        uint256 evmChainId;\\n        uint16 newChainId;\\n    }\\n\\n    event LogMessagePublished(address indexed sender, uint64 sequence, uint32 nonce, bytes payload, uint8 consistencyLevel);\\n    event ContractUpgraded(address indexed oldContract, address indexed newContract);\\n    event GuardianSetAdded(uint32 indexed index);\\n\\n    function publishMessage(\\n        uint32 nonce,\\n        bytes memory payload,\\n        uint8 consistencyLevel\\n    ) external payable returns (uint64 sequence);\\n\\n    function initialize() external;\\n\\n    function parseAndVerifyVM(bytes calldata encodedVM) external view returns (VM memory vm, bool valid, string memory reason);\\n\\n    function verifyVM(VM memory vm) external view returns (bool valid, string memory reason);\\n\\n    function verifySignatures(bytes32 hash, Signature[] memory signatures, GuardianSet memory guardianSet) external pure returns (bool valid, string memory reason);\\n\\n    function parseVM(bytes memory encodedVM) external pure returns (VM memory vm);\\n\\n    function quorum(uint numGuardians) external pure returns (uint numSignaturesRequiredForQuorum);\\n\\n    function getGuardianSet(uint32 index) external view returns (GuardianSet memory);\\n\\n    function getCurrentGuardianSetIndex() external view returns (uint32);\\n\\n    function getGuardianSetExpiry() external view returns (uint32);\\n\\n    function governanceActionIsConsumed(bytes32 hash) external view returns (bool);\\n\\n    function isInitialized(address impl) external view returns (bool);\\n\\n    function chainId() external view returns (uint16);\\n\\n    function isFork() external view returns (bool);\\n\\n    function governanceChainId() external view returns (uint16);\\n\\n    function governanceContract() external view returns (bytes32);\\n\\n    function messageFee() external view returns (uint256);\\n\\n    function evmChainId() external view returns (uint256);\\n\\n    function nextSequence(address emitter) external view returns (uint64);\\n\\n    function parseContractUpgrade(bytes memory encodedUpgrade) external pure returns (ContractUpgrade memory cu);\\n\\n    function parseGuardianSetUpgrade(bytes memory encodedUpgrade) external pure returns (GuardianSetUpgrade memory gsu);\\n\\n    function parseSetMessageFee(bytes memory encodedSetMessageFee) external pure returns (SetMessageFee memory smf);\\n\\n    function parseTransferFees(bytes memory encodedTransferFees) external pure returns (TransferFees memory tf);\\n\\n    function parseRecoverChainId(bytes memory encodedRecoverChainId) external pure returns (RecoverChainId memory rci);\\n\\n    function submitContractUpgrade(bytes memory _vm) external;\\n\\n    function submitSetMessageFee(bytes memory _vm) external;\\n\\n    function submitNewGuardianSet(bytes memory _vm) external;\\n\\n    function submitTransferFees(bytes memory _vm) external;\\n\\n    function submitRecoverChainId(bytes memory _vm) external;\\n}\",\"keccak256\":\"0x06c38148400274d9648a51d08d575799463276696959c611a13f9edb07a2d9c9\",\"license\":\"Apache 2\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a5b380380610a5b833981810160405281019061003291906100ed565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b60006100ba8261009d565b9050919050565b6100ca816100af565b81146100d557600080fd5b50565b6000815190506100e7816100c1565b92915050565b60006020828403121561010357610102610078565b5b6000610111848285016100d8565b91505092915050565b610932806101296000396000f3fe6080604052600436106100345760003560e01c8063082e4660146100395780632f60f70514610055578063f53774ab14610071575b600080fd5b610053600480360381019061004e9190610335565b61009a565b005b61006f600480360381019061006a91906104a8565b610160565b005b34801561007d57600080fd5b5061009860048036038101906100939190610504565b61020a565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bee9cdfc3460108460016040516020016100eb9061061c565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016101199493929190610768565b60206040518083038185885af1158015610137573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061015c91906107f4565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bee9cdfc346010856001866040518663ffffffff1660e01b81526004016101c29493929190610768565b60206040518083038185885af11580156101e0573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061020591906107f4565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3f511c1836040518263ffffffff1660e01b81526004016102669190610821565b6000604051808303816000875af1158015610285573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102ae91906108b3565b90507fe29ea56e364037e40b08d917432f4c85cfede3612457eb5e3eae34f8e4bda5a6816040516102df9190610821565b60405180910390a15050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610312816102ff565b811461031d57600080fd5b50565b60008135905061032f81610309565b92915050565b60006020828403121561034b5761034a6102f5565b5b600061035984828501610320565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103b58261036c565b810181811067ffffffffffffffff821117156103d4576103d361037d565b5b80604052505050565b60006103e76102eb565b90506103f382826103ac565b919050565b600067ffffffffffffffff8211156104135761041261037d565b5b61041c8261036c565b9050602081019050919050565b82818337600083830152505050565b600061044b610446846103f8565b6103dd565b90508281526020810184848401111561046757610466610367565b5b610472848285610429565b509392505050565b600082601f83011261048f5761048e610362565b5b813561049f848260208601610438565b91505092915050565b600080604083850312156104bf576104be6102f5565b5b60006104cd85828601610320565b925050602083013567ffffffffffffffff8111156104ee576104ed6102fa565b5b6104fa8582860161047a565b9150509250929050565b60006020828403121561051a576105196102f5565b5b600082013567ffffffffffffffff811115610538576105376102fa565b5b6105448482850161047a565b91505092915050565b600082825260208201905092915050565b7f7b2022706172656e7473223a20312c2022696e746572696f72223a207b20225860008201527f32223a205b207b202250617261636861696e223a20383838207d2c207b20224160208201527f63636f756e744b65793230223a2022307833353442313044343765383441303060408201527f3662394537653636413232394431373445384646324130363322207d205d7d7d606082015250565b600061060660808361054d565b91506106118261055e565b608082019050919050565b60006020820190508181036000830152610635816105f9565b9050919050565b6000819050919050565b600061ffff82169050919050565b6000819050919050565b600061067961067461066f8461063c565b610654565b610646565b9050919050565b6106898161065e565b82525050565b610698816102ff565b82525050565b6000819050919050565b600063ffffffff82169050919050565b60006106d36106ce6106c98461069e565b610654565b6106a8565b9050919050565b6106e3816106b8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610723578082015181840152602081019050610708565b60008484015250505050565b600061073a826106e9565b61074481856106f4565b9350610754818560208601610705565b61075d8161036c565b840191505092915050565b600060808201905061077d6000830187610680565b61078a602083018661068f565b61079760408301856106da565b81810360608301526107a9818461072f565b905095945050505050565b600067ffffffffffffffff82169050919050565b6107d1816107b4565b81146107dc57600080fd5b50565b6000815190506107ee816107c8565b92915050565b60006020828403121561080a576108096102f5565b5b6000610818848285016107df565b91505092915050565b6000602082019050818103600083015261083b818461072f565b905092915050565b6000610856610851846103f8565b6103dd565b90508281526020810184848401111561087257610871610367565b5b61087d848285610705565b509392505050565b600082601f83011261089a57610899610362565b5b81516108aa848260208601610843565b91505092915050565b6000602082840312156108c9576108c86102f5565b5b600082015167ffffffffffffffff8111156108e7576108e66102fa565b5b6108f384828501610885565b9150509291505056fea26469706673582212207eb0bacb6978803ee0e3fad00c5dc33c894eb23eb3b7f3442854b74adc8ad0db64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c8063082e4660146100395780632f60f70514610055578063f53774ab14610071575b600080fd5b610053600480360381019061004e9190610335565b61009a565b005b61006f600480360381019061006a91906104a8565b610160565b005b34801561007d57600080fd5b5061009860048036038101906100939190610504565b61020a565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bee9cdfc3460108460016040516020016100eb9061061c565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016101199493929190610768565b60206040518083038185885af1158015610137573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061015c91906107f4565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bee9cdfc346010856001866040518663ffffffff1660e01b81526004016101c29493929190610768565b60206040518083038185885af11580156101e0573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061020591906107f4565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3f511c1836040518263ffffffff1660e01b81526004016102669190610821565b6000604051808303816000875af1158015610285573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102ae91906108b3565b90507fe29ea56e364037e40b08d917432f4c85cfede3612457eb5e3eae34f8e4bda5a6816040516102df9190610821565b60405180910390a15050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610312816102ff565b811461031d57600080fd5b50565b60008135905061032f81610309565b92915050565b60006020828403121561034b5761034a6102f5565b5b600061035984828501610320565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103b58261036c565b810181811067ffffffffffffffff821117156103d4576103d361037d565b5b80604052505050565b60006103e76102eb565b90506103f382826103ac565b919050565b600067ffffffffffffffff8211156104135761041261037d565b5b61041c8261036c565b9050602081019050919050565b82818337600083830152505050565b600061044b610446846103f8565b6103dd565b90508281526020810184848401111561046757610466610367565b5b610472848285610429565b509392505050565b600082601f83011261048f5761048e610362565b5b813561049f848260208601610438565b91505092915050565b600080604083850312156104bf576104be6102f5565b5b60006104cd85828601610320565b925050602083013567ffffffffffffffff8111156104ee576104ed6102fa565b5b6104fa8582860161047a565b9150509250929050565b60006020828403121561051a576105196102f5565b5b600082013567ffffffffffffffff811115610538576105376102fa565b5b6105448482850161047a565b91505092915050565b600082825260208201905092915050565b7f7b2022706172656e7473223a20312c2022696e746572696f72223a207b20225860008201527f32223a205b207b202250617261636861696e223a20383838207d2c207b20224160208201527f63636f756e744b65793230223a2022307833353442313044343765383441303060408201527f3662394537653636413232394431373445384646324130363322207d205d7d7d606082015250565b600061060660808361054d565b91506106118261055e565b608082019050919050565b60006020820190508181036000830152610635816105f9565b9050919050565b6000819050919050565b600061ffff82169050919050565b6000819050919050565b600061067961067461066f8461063c565b610654565b610646565b9050919050565b6106898161065e565b82525050565b610698816102ff565b82525050565b6000819050919050565b600063ffffffff82169050919050565b60006106d36106ce6106c98461069e565b610654565b6106a8565b9050919050565b6106e3816106b8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610723578082015181840152602081019050610708565b60008484015250505050565b600061073a826106e9565b61074481856106f4565b9350610754818560208601610705565b61075d8161036c565b840191505092915050565b600060808201905061077d6000830187610680565b61078a602083018661068f565b61079760408301856106da565b81810360608301526107a9818461072f565b905095945050505050565b600067ffffffffffffffff82169050919050565b6107d1816107b4565b81146107dc57600080fd5b50565b6000815190506107ee816107c8565b92915050565b60006020828403121561080a576108096102f5565b5b6000610818848285016107df565b91505092915050565b6000602082019050818103600083015261083b818461072f565b905092915050565b6000610856610851846103f8565b6103dd565b90508281526020810184848401111561087257610871610367565b5b61087d848285610705565b509392505050565b600082601f83011261089a57610899610362565b5b81516108aa848260208601610843565b91505092915050565b6000602082840312156108c9576108c86102f5565b5b600082015167ffffffffffffffff8111156108e7576108e66102fa565b5b6108f384828501610885565b9150509291505056fea26469706673582212207eb0bacb6978803ee0e3fad00c5dc33c894eb23eb3b7f3442854b74adc8ad0db64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 83,
        "contract": "contracts/TokenTransferTest.sol:TokenTransferTest",
        "label": "tbridge",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITokenBridge)557"
      }
    ],
    "types": {
      "t_contract(ITokenBridge)557": {
        "encoding": "inplace",
        "label": "contract ITokenBridge",
        "numberOfBytes": "20"
      }
    }
  }
}